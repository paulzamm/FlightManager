from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import inspect

from app.api.endpoints import auth, flights, reservas, billetes, tarjetas, users
from app.core.config import settings
from app.database.database import Base, engine
from app.database.models import (
    Usuario, Vuelo, Aeropuerto, Aerolinea, 
    TarjetaCredito, Asiento, Reserva, Pasajero, Billete
)

def create_tables():
    """
    Crea todas las tablas en la base de datos si no existen.
    Muestra informaci√≥n √∫til sobre el proceso.
    """
    try:
        inspector = inspect(engine)
        existing_tables = inspector.get_table_names()
        
        print("\n" + "="*60)
        print("üîç VERIFICANDO BASE DE DATOS")
        print("="*60)
        
        if existing_tables:
            print(f"‚úÖ Tablas existentes encontradas: {len(existing_tables)}")
            for table in existing_tables:
                print(f"   - {table}")
        else:
            print("‚ö†Ô∏è  No se encontraron tablas existentes")
        
        print("\nüõ†Ô∏è  Creando tablas faltantes...")
        Base.metadata.create_all(bind=engine)
        
        # Verificar tablas despu√©s de la creaci√≥n
        inspector = inspect(engine)
        final_tables = inspector.get_table_names()
        
        print(f"‚úÖ Total de tablas en la base de datos: {len(final_tables)}")
        print("="*60 + "\n")
        
    except Exception as e:
        print("\n" + "="*60)
        print("‚ùå ERROR AL CREAR TABLAS")
        print("="*60)
        print(f"Error: {str(e)}")
        print("Verifica tu conexi√≥n a PostgreSQL y las credenciales en .env")
        print("="*60 + "\n")
        raise

# Creaci√≥n de tablas (si no existen)
create_tables()

# Crear instancia de FastAPI
app = FastAPI(
    title="Flight Manager API",
    description="Sistema de Reserva de Vuelos - API REST completa",
    version="1.0.0",
    docs_url="/docs",  # Swagger UI
    redoc_url="/redoc"  # ReDoc
)

# Configurar CORS para permitir peticiones desde el frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Permitir todas las fuentes
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Registrar routers
app.include_router(
    auth.router,
    prefix="/auth",
    tags=["Autenticaci√≥n"]
)

app.include_router(
    flights.router,
    prefix="/flights",
    tags=["Vuelos"]
)

app.include_router(
    reservas.router,
    prefix="/reservas",
    tags=["Reservas"]
)

app.include_router(
    billetes.router,
    prefix="/billetes",
    tags=["Billetes y Compra"]
)

app.include_router(
    tarjetas.router,
    prefix="/tarjetas",
    tags=["Tarjetas de Cr√©dito"]
)

app.include_router(
    users.router,
    prefix="/users",
    tags=["Gesti√≥n de Usuario"]
)

# Endpoint ra√≠z
@app.get("/", tags=["Root"])
def read_root():
    """
    Mensaje de bienvenida del sistema.
    """
    return {
        "message": "Bienvenido al Sistema de Reserva de Vuelos",
        "version": "1.0.0",
        "servicios_disponibles": [
            "Registro e inicio de sesi√≥n de usuarios",
            "Consulta de vuelos por horarios y tarifas",
            "B√∫squeda avanzada con preferencias",
            "Reserva de vuelos con selecci√≥n de asientos",
            "Compra de billetes con tarjeta de cr√©dito",
            "Gesti√≥n de tarjetas de cr√©dito",
            "Historial de reservas y billetes",
            "Modificaci√≥n y cancelaci√≥n de reservas",
            "Gesti√≥n de perfil de usuario"
        ],
        "documentacion": {
            "swagger_ui": "/docs",
            "redoc": "/redoc"
        },
        "endpoints_principales": {
            "autenticacion": "/auth",
            "vuelos": "/flights",
            "reservas": "/reservas",
            "billetes": "/billetes",
            "tarjetas": "/tarjetas",
            "usuario": "/users"
        }
    }

# Endpoint de health check
@app.get("/health", tags=["Health"])
def health_check():
    """
    Verifica que la API est√© funcionando correctamente.
    """
    return {
        "status": "healthy",
        "service": "Flight Manager API",
        "version": "1.0.0"
    }

# Manejador de inicio
@app.on_event("startup")
async def startup_event():
    """
    Evento que se ejecuta al iniciar la aplicaci√≥n.
    """
    print("\n" + "="*60)
    print("üöÄ FLIGHT MANAGER API INICIADA")
    print("="*60)
    print("üìù Documentaci√≥n Swagger: http://localhost:8000/docs")
    print("üìò Documentaci√≥n ReDoc:   http://localhost:8000/redoc")
    print("üè• Health Check:         http://localhost:8000/health")
    print("üîÑ Servidor ejecut√°ndose en: http://0.0.0.0:8000")
    print("="*60 + "\n")

# Manejador de cierre
@app.on_event("shutdown")
async def shutdown_event():
    """
    Evento que se ejecuta al cerrar la aplicaci√≥n.
    """
    print("\n" + "="*60)
    print("üëã CERRANDO FLIGHT MANAGER API")
    print("="*60 + "\n")